<div class="events-wrapper">
  <div class="events-search">

    <div class="events-filters">

      <form action="<% events_path %>" class="">

        <div class="location-date">
          <div class="form-group location-wrapper">
            <input type="text" class="form-control location" id="location" placeholder="&#61447;" name="location" value="<%= @location %>">
            <i id="icons-inputs" class="fa fa-search"></i>
          </div>

          <div class="form-group after">
            <input type="text" id="start-date" class="form-control datepicker" name="start_date" placeholder="<%= Date.today.strftime('%m/%d/%Y') %>" value="<%= @picked_start_date %>">
            <i id="icons-inputs" class="fa fa-calendar-minus-o"></i>
          </div>

          <div class="form-group before">
            <input type="text" id="end-date" class="form-control datepicker" name="end_date" placeholder="-" value="<%= @picked_end_date %>">
            <i id="icons-inputs" class="fa fa-calendar-plus-o"></i>
          </div>
        </div>

        <div class="form-group artists-genres">

          <div class="artists">
            <select class="form-control" id="artist-selection" name="artist_filter">
              <option>All artists</option>
              <% duplicated_artists_names = [] %>
              <% @events_filtered.each do |event| %>
                <% event.artists[0].try(:name).blank? ? 'N/A' : duplicated_artists_names << event.artists.first.name %>
              <% end %>
              <% artists_names = duplicated_artists_names.uniq %>
              <% artists_names = artists_names.sort_by { |name| I18n.transliterate(name.downcase) } %>
              <% artists_names.each do |artist_name| %>
                <option><%= artist_name %></option>
              <% end %>
            </select>
          </div>

          <div class="genres">
            <select class="form-control" id="genre-selection" name="genre_filter">
              <option>All genres</option>
              <% genres = [] %>
              <% @events_filtered.each do |event| %>
                <% genres << event.genres %>
              <% end %>
              <% genres = genres.flatten.uniq %>
              <% genres.each do |genre| %>
                <option><%= genre.name.capitalize %></option>
              <% end %>
            </select>
          </div>
        </div>

        <div class="result-filter">
          <div class="result-mess">
            <% if @events_filtered.count == 0 %>
              <h4>There is no event matching your search in this area</h4>
            <% elsif @selected_genre != "All genres" %>
              <h4><span><%= @events_filtered.count %></span> events for <strong><%= @selected_genre %></strong></h4>
            <% elsif @events_filtered.count >= 1 && current_user.nil? %>
              <h4><span><%= @events_filtered.count %></span> events found for <strong><%= @selected_artist %></strong></h4>
            <% elsif @selected_artist == "All artists" %>
              <h4><span><%= @events_filtered.count %></span> events found in total</h4>
            <% elsif @events_filtered.count >= 1 %>
              <h4><span><%= @events_filtered.count %></span> events for <strong><%= @selected_artist %></strong></h4>
            <% end %>
          </div>

          <div class="submit-button">
            <input type="submit" class="filter-button" value="Apply">
          </div>
        </div>

      </form>

    </div>

    <div class="index-events-list">

      <div id="events-list">

        <div id="events-list-header">
          <%= render 'event_list_header' %>
        </div>


        <% @events_filtered.group_by(&:year).each do |year, events_array| %>
          <% Hash[ events_array.group_by(&:day).sort_by { |key, val| key } ].each do |day, events| %>
              <div class="day-text"><h3><%= events[0].date.strftime("%A, %d %B %Y") %></h3></div>
              <div class="day-lign"></div>
              <% events.each do |e|  %>
                <div class="wrapper-event-description event" id="event_<%= e.id %>" data-latitude="<%= e.venue.latitude %>" data-longitude="<%= e.venue.longitude %>">
                  <%= render 'event_element', event: e, current_user_liked_items: @current_user_liked_items %>
                </div>
              <% end %>
            <% end %>
        <% end %>
    </div>
  </div>
</div>

<div id="event-map"></div>

</div>

<% content_for(:after_js) do %>

  <script>
    $(document).ready(function() {
      //Datepicker
      $('.datepicker').datepicker({
        autoclose: true,
        weekStart: 1,
        todayHighlight: true,
        option: 'MM/DD/YYYY'
      });

      // GMAPS API V3
      //store the ruby poi markers into JS format
      var markersData = <%= raw @events_markers.to_json %>;
      var markers = [];
      function createMarker (latlng, markerInfowindow, icon) {
        var marker = new google.maps.Marker({
          map: map,
          position: latlng,
          icon: icon
        });
        markers.push(marker);
        google.maps.event.addListener(marker, 'click', function() {
          //infowindow content
          var iwContent = markerInfowindow;
          // including content to the infowindow
          infoWindow.setContent(iwContent);
          // opening the infowindow in the current map and at the current marker location
          infoWindow.open(map, marker);
        });
      }
      // creating markers with createMarker function
      function displayMarkers(markersData){
        // this variable sets the map bounds and zoom level according to markers position
        var bounds = new google.maps.LatLngBounds();
        var venues_coordinates = [];
        for (var i = 0; i < markersData.length; i++){
          var latlng = new google.maps.LatLng(markersData[i].venue_lat, markersData[i].venue_lng);
          var markerInfowindow = markersData[i].infowindow;
          var icon = {
              path: "M4.415,8.829c2.432,0,4.415-1.983,4.415-4.415 C8.829,1.983,6.846,0,4.415,0S0,1.983,0,4.415C0,6.846,1.983,8.829,4.415,8.829z",
              fillColor: '#1FC4FF',
              fillOpacity: 1,
              anchor: new google.maps.Point(0,0),
              strokeWeight: 1,
              scale: 2
          }
          venues_coordinates.push(latlng);
          createMarker(latlng, markerInfowindow, icon);

          // Marker’s Lat. and Lng. values are added to bounds variable
          bounds.extend(latlng);
        }
        var markerCluster = new MarkerClusterer(map, markers);
        // the bounds variable is used to set the map bounds with API’s fitBounds() function
        map.fitBounds(bounds);
      }

      function initialize() {
        var mapOptions = {
          zoom: 9,
          minZoom:3,
          maxZoom: 18,
          mapTypeId: 'roadmap',
          styles: [{"featureType":"administrative","elementType":"all","stylers":[{"visibility":"on"},{"lightness":33}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2e5d4"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#c5dac6"}]},{"featureType":"poi.park","elementType":"labels","stylers":[{"visibility":"on"},{"lightness":20}]},{"featureType":"road","elementType":"all","stylers":[{"lightness":20}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#c5c6c6"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#e4d7c6"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"color":"#fbfaf7"}]},{"featureType":"water","elementType":"all","stylers":[{"visibility":"on"},{"color":"#acbcc9"}]}]
        };
        map = new google.maps.Map(document.getElementById('event-map'), mapOptions);
        // a new Info Window is created
        infoWindow = new google.maps.InfoWindow();
        // Event that closes the InfoWindow with a click on the map
        google.maps.event.addListener(map, 'click', function() {
          infoWindow.close();
        });
        // displayMarkers() function is called for markers creation
        displayMarkers(markersData);
      }
      initialize();
      // google.maps.event.addDomListener(window, 'load', initialize);

      //function to reposition the map
      function newLocation(newLat,newLng) {
        map.setCenter({
          lat : newLat,
          lng : newLng
        });
        map.setZoom(15);
      }

      var lat;
      var lng;
      //create the associated event listener for newLocation and zoom of the map
      $('.event').on('click', function() {
        var lat = $(this).data('latitude')
        var lng = $(this).data('longitude')
        newLocation(lat, lng);
      })

      //Autocomplete
      var search_location = $('.location').get(0);
      if (search_location) {
        var autocomplete = new google.maps.places.Autocomplete(search_location, { types: ['geocode'] });
        // google.maps.event.addListener(autocomplete, 'place_changed', onPlaceChanged);
        google.maps.event.addDomListener(search_location, 'keydown');
      }
      $("#events-filters input").on("keydown", function(e) {
        if (e.keyCode == 13) {
          console.log("enter")
          e.preventDefault(); // Do not submit the form on Enter.
        }
      });

    var subNavBar = $('#events-list-header').offset();

    $('.events-search').scroll(function(){
      var subNavBar = $('#events-list-header').offset();
      if ($('.events-search').scrollTop() > subNavBar.top ) {
        $('#events-list-header').addClass('sticky-subnav');
        $('.login-now').css('display', 'flex');
      } else {
        $('#events-list-header').removeClass('sticky-subnav');
        $('.login-now').css('display', 'none');
      }
    });

    });
  </script>
<% end %>
